plugins {
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.minecraftforge.gradle' version '[6.0,6.2)'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = mod_version
group = mod_group_id
base {
	archivesName = "${mod_id}-${minecraft_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

sourceSets {
	api {
		compileClasspath = main.compileClasspath
	}
	main {
		resources {
			srcDir 'src/generated/resources'
		}
		compileClasspath += api.output
		runtimeClasspath += api.output
	}
}

minecraft {
	mappings channel: mapping_channel, version: "${mapping_version}-${minecraft_version}"

	// This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
	// It is REQUIRED to be set to true for this template to function.
	// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
	copyIdeResources = true

	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

	runs {
		client {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			// The markers can be added/remove as needed separated by commas.
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			property 'forge.logging.markers', 'REGISTRIES'

			property 'forge.logging.console.level', 'info'

			property 'forge.enabledGameTestNamespaces', mod_id

			mods {
				"${mod_id}" {
					source sourceSets.main
					source sourceSets.api
				}
			}
		}

		server {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'

			property 'forge.logging.console.level', 'info'

			property 'forge.enabledGameTestNamespaces', mod_id

			mods {
				"${mod_id}" {
					source sourceSets.main
					source sourceSets.api
				}
			}
		}

		gameTestServer {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'

			property 'forge.logging.console.level', 'info'

			property 'forge.enabledGameTestNamespaces', mod_id

			mods {
				"${mod_id}" {
					source sourceSets.main
					source sourceSets.api
				}
			}
		}

		data {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'

			property 'forge.logging.console.level', 'info'

			// Specify the mod_id for data generation, where to output the resulting resource, and where to look for existing resources.
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

			mods {
				"${mod_id}" {
					source sourceSets.main
					source sourceSets.api
				}
			}
		}
	}
}

repositories {
//	maven {
//		name = "forge"
//		url = "${maven_mirror}"
//	}
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
		minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
		forge_version: forge_version, forge_version_range: forge_version_range,
		loader_version_range: loader_version_range,
		mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
		mod_authors: mod_authors, mod_description: mod_description
]
processResources {
	inputs.properties replaceProperties
	replaceProperties.put 'project', project

	filesMatching(resourceTargets) {
		expand replaceProperties
	}
}

var manifest_info = [
		"Specification-Title"     : mod_id,
		"Specification-Vendor"    : mod_authors,
		"Specification-Version"   : "1",
		"Implementation-Title"    : project.name,
		"Implementation-Version"  : project.jar.archiveVersion,
		"Implementation-Vendor"   : mod_authors,
		"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
]

jar {
	from sourceSets.api.output
	manifest {
		attributes(manifest_info)
	}
}

tasks.register('apiJar', Jar) {
	dependsOn apiClasses
	archiveClassifier = 'api'
	from sourceSets.api.output
	manifest {
		attributes(manifest_info)
	}
}

tasks.register('sourcesJar', Jar) {
	dependsOn classes
	archiveClassifier = 'sources'
	from sourceSets.main.allSource
	from sourceSets.api.allSource
	manifest {
		attributes(manifest_info)
	}
}

artifacts {
	archives sourcesJar
	archives apiJar
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
	repositories {
		maven {
			url "file://${project.projectDir}/ModRelease"
		}
	}
	publications {
		mavenJava(MavenPublication) {
			artifactId = archivesBaseName
			artifact jar
			artifact sourcesJar
			artifact apiJar
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}
