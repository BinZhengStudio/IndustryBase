plugins {
	id 'eclipse'
	id 'maven-publish'
	id 'net.minecraftforge.gradle' version '5.1.+'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = modVersion
group = modGroup
archivesBaseName = "${modId}-${mcVersion}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets {
	api {
		compileClasspath = main.compileClasspath
	}
	main {
		resources {
			srcDir 'src/generated/resources'
		}
		compileClasspath += api.output
		runtimeClasspath += api.output
	}
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
	mappings channel: 'parchment', version: "${parchmentVersion}-${mcVersion}"

	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

	runs {
		client {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			// The markers can be added/remove as needed separated by commas.
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			property 'forge.logging.markers', 'REGISTRIES'

			property 'forge.logging.console.level', 'debug'

			property 'forge.enabledGameTestNamespaces', 'industrybase'

			mods {
				industrybase {
					source sourceSets.main
					source sourceSets.api
				}
			}
		}

		server {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'

			property 'forge.logging.console.level', 'debug'

			property 'forge.enabledGameTestNamespaces', 'industrybase'

			mods {
				industrybase {
					source sourceSets.main
					source sourceSets.api
				}
			}
		}

		gameTestServer {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'

			property 'forge.logging.console.level', 'debug'

			property 'forge.enabledGameTestNamespaces', 'industrybase'

			mods {
				industrybase {
					source sourceSets.main
					source sourceSets.api
				}
			}
		}

		data {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'

			property 'forge.logging.console.level', 'debug'

			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			args '--mod', 'industrybase', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

			mods {
				industrybase {
					source sourceSets.main
					source sourceSets.api
				}
			}
		}
	}
}

repositories {
}

dependencies {
	minecraft "net.minecraftforge:forge:${mcVersion}-${forgeVersion}"
}

var manifest_info = [
		"Specification-Title"     : modName,
		"Specification-Vendor"    : modAuthor,
		"Specification-Version"   : modSpecVersion,
		"Implementation-Title"    : modName,
		"Implementation-Version"  : modVersion,
		"Implementation-Vendor"   : modAuthor,
		"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
]

jar {
	from sourceSets.api.output
	manifest {
		attributes(manifest_info)
	}
}

task apiJar(type: Jar, dependsOn: apiClasses) {
	classifier = 'api'
	from sourceSets.api.output
	manifest {
		attributes(manifest_info)
	}
}

task apiSourceJar(type: Jar, dependsOn: apiClasses) {
	classifier = 'api-source'
	from sourceSets.api.allSource
	manifest {
		attributes(manifest_info)
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
	from sourceSets.api.allSource
	manifest {
		attributes(manifest_info)
	}
}

artifacts {
	archives sourcesJar
	archives apiJar
	archives apiSourceJar
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
	repositories {
		maven {
			url "file://${project.projectDir}/ModRelease"
		}
	}
	publications {
		mavenJar(MavenPublication) {
			artifactId = archivesBaseName
			artifact jar
			artifact sourcesJar
			artifact apiJar
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}
